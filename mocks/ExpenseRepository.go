// Code generated by mockery v2.42.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/deBeloper-code/goFinance/internal/pkg/entity"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// ExpenseRepository is an autogenerated mock type for the ExpenseRepository type
type ExpenseRepository struct {
	mock.Mock
}

// AddExpense provides a mock function with given fields: expense
func (_m *ExpenseRepository) AddExpense(expense *entity.Expense) error {
	ret := _m.Called(expense)

	if len(ret) == 0 {
		panic("no return value specified for AddExpense")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Expense) error); ok {
		r0 = rf(expense)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserExpense provides a mock function with given fields: userID, startDate, endDate
func (_m *ExpenseRepository) GetUserExpense(userID string, startDate time.Time, endDate time.Time) ([]*entity.Expense, error) {
	ret := _m.Called(userID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for GetUserExpense")
	}

	var r0 []*entity.Expense
	var r1 error
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) ([]*entity.Expense, error)); ok {
		return rf(userID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time) []*entity.Expense); ok {
		r0 = rf(userID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Expense)
		}
	}

	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time) error); ok {
		r1 = rf(userID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExpenseRepository creates a new instance of ExpenseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExpenseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExpenseRepository {
	mock := &ExpenseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
